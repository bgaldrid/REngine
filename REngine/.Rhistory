setwd("R")
dir()
source("test.R")
0
source("test.R")
0
source("test.R")
0
source("test.R")
0
source("test.R")
8
ls()
out
alpha
cos(alpha)
cos(alpha)<0
(cos(alpha)<0)
(cos(alpha)<0)*1
(cos(alpha)<0)*alpha
(cos(alpha)>0)*alpha
(cos(alpha)>0)*alpha + (cos(alpha)<0)*(alpha+pi)
cos((cos(alpha)>0)*alpha + (cos(alpha)<0)*(alpha+pi))
sin(alpha)
Q
source("test.R")
8
ls()
out
c_eff
W
u
l
Q
source("test.R")
8
ls()
l
W
FA_eff_radians
7
ls()
FAEr
1
1
ls()
fae
Q
fae
materials
source("test.R")
0
fae
source("test.R")
8
out
ls()
gamma
sliceCoords
int
h
b
7
ls()
slice
int
TL
6
ls()
par
5
ls()
Q
source("test.R")
ls()
x
x
x
ls()
x
x
Q
source("test.R")
0
source("test.R")
source("test.R")
temp
source("test.R")
source("test.R")
0
source("test.R")
temp
source("test.R")
source("test.R")
source("test.R")
source("test.R")
temp

    #Optimize over F
    N = 10
    fae = rnorm(n = N, mean = (materials["FrictionAngle_eff","MEAN"]*pi)/180, sd = (materials["FrictionAngle_eff","SD"]*pi)/180)
    ce = rnorm(n = N, mean = materials["cohesion_eff","MEAN"], sd = materials["cohesion_eff","SD"])
    g = rnorm(n = N, mean = materials["UnitWeight","MEAN"], sd = materials["UnitWeight","SD"])
    pp = 0

    vals = list(fae, ce, g, pp)
    values = do.call(expand.grid, vals)
values
10*10*10
system.time(test.R)
0
system.time(source("test.R"))
0.22*1000
220/60
library(parallel)
detectCores()
class(values)
source("SlopeStability.R")
ls()
source("SlopeStability.R")
0
source("SlopeStability.R")
SlopeStability(geom = geom, materials = materials, xrange = c(69,71), yrange = c(69,71), )jkhsdfg
source("SlopeStability.R")
SlopeStability(geom = geom, materials = materials, xrange = c(69,71), yrange = c(69,71), Rrange = c(59,61), N=1) 
0
SlopeStability(geom = geom, materials = materials, xrange = c(69,71), yrange = c(69,71), Rrange = c(59,61), N=1) 
0
source("test.R")
6
ls()
5
ls()
up
0
source("test.R")
0
stopCluster(cluster)
0
q()
setwd(R)
0
setwd("R")
source("test.R")
0
source("test.R")
ls()
up
low
0
source("test.R")
5
ls()
class(values)
0
source("test.R")
ls()
class(values)
dim(values)
values
cluster
clusterExport(cl = cluster, varlist = c("values","method"))
0
Q
q()
